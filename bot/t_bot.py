import telebot
from telebot import types
from db_sqlite import auth, update

bot_token = '7256671211:AAGTZKYiVcg_y3jfvBBqtBXLHilIwG7he3Q'
bot = telebot.TeleBot(bot_token)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
start_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
item1 = types.KeyboardButton("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üì∫")
item2 = types.KeyboardButton("–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üëÄ")
start_markup.add(item1).row(item2)

# –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
channels_markup = types.InlineKeyboardMarkup()
item1 = types.InlineKeyboardButton("–û—à–∏–±–∫–∏ —Ç–∞–±–µ–ª—è üìó", callback_data='worklog')
item2 = types.InlineKeyboardButton("–û—à–∏–±–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ üìë", callback_data='doccorp')
item3 = types.InlineKeyboardButton("–û—à–∏–±–∫–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ üìûüì≤", callback_data='redirect')

channels_markup.add(item1).row(item2).row(item3)

# –∫–Ω–æ–ø–∫–∏ —Ç–∞–±–µ–ª—è
worklog_markup = types.InlineKeyboardMarkup()
sub = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîî", callback_data='sub_worklog')
unsub = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üîï", callback_data='unsub_worklog')
worklog_markup.add(sub).row(unsub)

# –∫–Ω–æ–ø–∫–∏ –∫–∞–¥—Ä–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
doccorp_markup = types.InlineKeyboardMarkup()
sub = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîî", callback_data='sub_doccorp')
unsub = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üîï", callback_data='unsub_doccorp')
doccorp_markup.add(sub).row(unsub)

# –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
redirect_markup = types.InlineKeyboardMarkup()
sub = types.InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è üîî", callback_data='sub_redirect')
unsub = types.InlineKeyboardButton("–û—Ç–ø–∏—Å–∞—Ç—å—Å—è üîï", callback_data='unsub_redirect')
redirect_markup.add(sub).row(unsub)

user = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /help –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–æ–∫
@bot.message_handler(commands=['start', 'menu'])
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    global user
    user = auth(user_id, user_name)

    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=start_markup)


@bot.message_handler(func=lambda message: message.text == '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üì∫')
def send_channels(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    global user
    user = auth(user_id, user_name)

    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üì∫", reply_markup=channels_markup)


@bot.message_handler(func=lambda message: message.text == '–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üëÄ')
def send_my_channels(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    global user
    user = auth(user_id, user_name)

    worklog = '–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if user['worklog_errors'] == 1 else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'
    doccorp = '–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if user['doccorp_errors'] == 1 else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'
    redirect = '–ê–∫—Ç–∏–≤–Ω–∞ ‚úÖ' if user['redirect_errors'] == 1 else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞ ‚ùå'

    bot.send_message(message.chat.id, f"–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üëÄ\n"
                                      f"üìó –¢–∞–±–µ–ª—å: {worklog} \n"
                                      f"üìë –ö–∞–¥—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã: {doccorp} \n"
                                      f"üìûüì≤ –ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è: {redirect}",
                     parse_mode='HTML')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    print(user)

    if call.data == "channels":
        bot.answer_callback_query(call.id)
        bot.send_message(call.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã üì∫", reply_markup=channels_markup)
    elif call.data == "worklog":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–¢–∞–±–µ–ª—å üìó", reply_markup=worklog_markup)
    elif call.data == "doccorp":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ö–∞–¥—Ä–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã üìë", reply_markup=doccorp_markup)
    elif call.data == "redirect":
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ü–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è üìûüì≤", reply_markup=redirect_markup)


    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    elif call.data.split('_')[0] == "sub" and user[f"{call.data.split('_')[1]}_errors"] == 0:

        subscribe = f"{call.data.split('_')[1]}_errors"
        user[subscribe] = 1
        update(subscribe, 1, user_id=call.from_user.id)
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")

    elif call.data.split('_')[0] == "sub" and user[f"{call.data.split('_')[1]}_errors"] == 1:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚ö†Ô∏è")

    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–ø–∏—Å–∫—É
    elif call.data.split('_')[0] == "unsub" and user[f"{call.data.split('_')[1]}_errors"] == 1:
        subscribe = f"{call.data.split('_')[1]}_errors"
        user[subscribe] = 0
        update(subscribe, 0, user_id=call.from_user.id)
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    elif call.data.split('_')[0] == "unsub" and user[f"{call.data.split('_')[1]}_errors"] == 0:
        bot.answer_callback_query(call.id)
        bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É ‚ö†Ô∏è")

    #
    # # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–∞–±–µ–ª—å
    # elif call.data == "sub_worklog" and user['worklog_errors'] == 0:
    #     user['worklog_errors'] = 1
    #     update('worklog_errors', 1, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")
    # elif call.data == "sub_worklog" and user['worklog_errors'] == 1:
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚ö†Ô∏è")
    #
    # # –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç —Ç–∞–±–µ–ª—è
    # elif call.data == "unsub_worklog" and user['worklog_errors'] == 1:
    #     user['worklog_errors'] = 0
    #     update('worklog_errors', 0, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    # elif call.data == "unsub_worklog" and user['worklog_errors'] == 0:
    #     bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É ‚ö†Ô∏è")
    #
    # # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–¥—Ä–æ–≤—ã–µ
    # elif call.data == "sub_doccorp" and user['doccorp_errors'] == 0:
    #     user['doccorp_errors'] = 1
    #     update('doccorp_errors', 1, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")
    # elif call.data == "sub_doccorp" and user['doccorp_errors'] == 1:
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚ö†Ô∏è")
    #
    # # –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–∞–¥—Ä–æ–≤—ã—Ö
    # elif call.data == "unsub_doccorp" and user['doccorp_errors'] == 1:
    #     user['doccorp_errors'] = 0
    #     update('doccorp_errors', 0, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    # elif call.data == "unsub_doccorp" and user['worklog_errors'] == 0:
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É ‚ö†Ô∏è")
    #
    #     # –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—é
    # elif call.data == "sub_redirect" and user['redirect_errors'] == 0:
    #     user['redirect_errors'] = 1
    #     update('redirect_errors', 1, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚úÖ")
    # elif call.data == "sub_redirect" and user['redirect_errors'] == 1:
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ ‚ö†Ô∏è")
    #
    # # –æ—Ç–ø–∏—Å–∫–∞ –æ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏
    # elif call.data == "unsub_redirect" and user['redirect_errors'] == 1:
    #     user['redirect_errors'] = 0
    #     update('redirect_errors', 0, user_id=call.from_user.id)
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")
    # elif call.data == "unsub_redirect" and user['redirect_errors'] == 0:
    #     bot.answer_callback_query(call.id)
    #     bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É ‚ö†Ô∏è")


bot.polling(non_stop=True)
